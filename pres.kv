#:import Window kivy.core.window.Window
#:import transitions main.transitions
#:import choice random.choice
#:import random random.random
#:set h1 '100sp'
#:set h2 '50sp'
#:set h3 '30sp'
#:set text '25sp'


FloatLayout:
    GridLayout:
        id: gl
        x: root.x
        top: sum(c.height for c in self.children[:app.page+1])
        on_pos: print self.pos
        cols: 1
        size_hint_y: None
        height: self.minimum_height

        # title
        FloatLayout:
            Image:
                size_hint: .5, .5
                pos_hint: {'center_x': .5, 'center_y': .5}
                source: 'data/logo/kivy-icon-512.png'

            FloatLabel:
                pos_hint: {'center_x': .5, 'top': .9}
                text: 'Kivy'
                font_size: h1

            FloatLabel:
                text: 'Applications multitouch et mobile, avec Python.'
                text_size: root.width, None
                font_size: h2
                pos_hint: {'center_x': .5, 'y': .1}

        # introduction
        BoxLayout:
            orientation: 'vertical'
            size_hint_y: None
            height: Window.height
            Title:
                text: 'Introduction'
            TextLine:
                text:
                    (
                    "Kivy est un framework UI python, orienté interaction multitouch\n"
                    "Basé sur openglES 2.0, il est très portable, et très performant\n"
                    "Il est très facile à étendre en Python, puisque c'est son langage natif\n"
                    ""
                    )
            Widget:


        # concepts
        # widget tree, canvas, properties
        BoxLayout:
            pos_hint: {'x': 0}
            orientation: 'vertical'
            size_hint_y: None
            height: Window.height
            Title:
                text: 'Concepts'
            TextLine:
                text:
                    (
                    'Widget\n'
                    '- Un widget a une représentation graphique et un ensemble de comportements\n'
                    '- Un widget peut avoir un parent\n'
                    '- Un widget peut avoir des enfants\n'
                    )
            Widget:

        # hello world python
        Magnet:
            size_hint_y: None
            height: Window.height
            StencilView:
                id: stencil_1
                FloatLayout:
                    pos: stencil_1.pos
                    size: stencil_1.size
                    TabbedPanel:
                        pos_hint: {'x': 0, 'y': 0}
                        do_default_tab: False
                        TabbedPanelItem:
                            text: 'Code'
                            CodeInput:
                                text: open('hello_world_py.py').read()
                                readonly: True

                        TabbedPanelItem:
                            text: 'Result'
                            Label:
                                canvas.before:
                                    Color:
                                        rgba: 0, 0, 0, 1
                                    Rectangle:
                                        pos: self.pos
                                        size: self.size
                                text: 'Hello World'

        # hello world KV
        Magnet:
            size_hint_y: None
            height: Window.height
            StencilView:
                id: stencil_2
                FloatLayout:
                    pos: stencil_2.pos
                    size: stencil_2.size
                    TabbedPanel:
                        pos_hint: {'x': 0, 'y': 0}
                        do_default_tab: False
                        TabbedPanelItem:
                            text: 'Code python'
                            CodeInput:
                                text: open('hello_world_kv.py').read()
                                readonly: True

                        TabbedPanelItem:
                            text: 'Code KV'
                            CodeInput:
                                id: hwcode
                                text: open('hello_world_kv.kv').read()
                                readonly: True

                        TabbedPanelItem:
                            text: 'Result'
                            PresWidget:
                                canvas.before:
                                    Color:
                                        rgba: 0, 0, 0, 1
                                    Rectangle:
                                        pos: self.pos
                                        size: self.size
                                source: hwcode.text

        # example plus complex avec python et kv
        Magnet:
            size_hint_y: None
            height: Window.height
            BoxLayout:
                ScrollView:
                    CodeInput:
                        id: lbl
                        text: open('complex.kv').read()

                PresWidget:
                    source: lbl.text

        # explications properties
        Magnet:
            size_hint_y: None
            height: Window.height
            BoxLayout:
                orientation: 'vertical'

                TextLine:
                    text:
                        (
                        "Les propriétés des classes sont une extension du principe des attributs\n"
                        "Elles permettent d'associer des actions aux changements de valeurs\n"
                        "Elles représentent les types de données de base: \n"
                        " - NumericProperty\n"
                        " - StringProperty\n"
                        " - ObjectProperty\n"
                        " - ListProperty\n"
                        "Mais aussi d'abstraire des comportements plus complexes:\n"
                        " - AliasProperty\n"
                        )

                Widget

        # explications Canvas
        Magnet:
            size_hint_y: None
            height: Window.height
            BoxLayout:
                orientation: 'vertical'

                TextLine:
                    text:
                        (
                        "La représentation des widgets se fait via des instructions canvas\n"
                        "L'api graphique de kivy est un wrapping d'openglES, simplifiant grandement son usage\n"
                        "Écrit principalement en cython, elle permet une bonne optimisation\n"
                        )
                BoxLayout:
                    TextLine:
                        text:
                            (
                            "Instractions de dessin:\n"
                            " - Line\n"
                            " - Rectangle\n"
                            " - Ellipse\n"
                            " - etc…\n"
                            )
                    TextLine:
                        text:
                            (
                            "Instructions de context:\n"
                            " - Color\n"
                            " - StencilPush/StencilPop\n"
                            " - PushMatrix/PopMatrix\n"
                            " - Rotate/Scale/Translate\n"
                            )

                Widget
        # examples canvas + properties
        Magnet:
            size_hint_y: None
            height: Window.height
            BoxLayout:
                TabbedPanel:
                    do_default_tab: False
                    TabbedPanelItem:
                        text: 'kv'
                        ScrollView:
                            CodeInput:
                                size_hint_y: None
                                height: 1500
                                id: lbl2
                                text: open('canvas_properties.kv').read()

                    TabbedPanelItem:
                        text: 'python'
                        CodeInput:
                            text: open('rounded.py').read()

                PresWidget:
                    source: lbl2.text


        # classes dynamiques
        Magnet:
            size_hint_y: None
            height: Window.height

            BoxLayout:
                orientation: 'vertical'

            TextLine:
                text:
                    (
                    "Besoin de factoriser le code kv (présentation), sans pour autant avoir besoin de créer des classes python\n"
                    "déclaration d'une classe coté kv, avec héritage d'un autre widget\n"
                    )
            TextLine:
                text:
                    ""

        ## pyjnius/pyobjus

        # présentation du probleme

        # pyjnius

        # pyobjus

        ## packaging
        # python-for-android

        # kivy-ios

        # buildozer

        ## conclusion

        # questions?


<FloatLabel@Label>:
    size: self.texture_size
    id: label
    size_hint: None, None
    halign: 'center'

<FloatLayout>:
    size_hint_y: None
    height: Window.height

<TextLine@Magnet>:
    text: ''
    transition: {'center_x:': choice(transitions), 'center_y': choice(transitions)}
    duration: random() * 3
    size_hint_y: None
    height: label.texture_size[1]
    pos_hint: {'x': 0}
    Label:
        id: label
        text: root.text
        text_size: root.width, None
        font_size: text

<Title@Label>:
    size: self.texture_size
    size_hint: None, None
    halign: 'center'
    font_size: h2
